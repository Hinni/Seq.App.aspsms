name: $(Date:yyyyMMdd)$(Rev:-rrr)

trigger:
  batch: true
  branches:
    include:
    - master
    exclude:
    - features/*
    - features/experimental/*
  paths:
    exclude:
    - README.md

pr:
  branches:
    include:
    - master
    - features/*
    exclude:
    - features/experimental/*
  paths:
    exclude:
    - README.md

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  Major: '2'
  Minor: '0'
  Patch: '0'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 2.1.500'
  inputs:
    packageType: sdk
    version: 2.1.500
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: NuGetToolInstaller@1
  displayName: 'Install latest NuGet 5.x'
  inputs:
    version: 5.x
    checkLatest: true

- task: NuGetCommand@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: restore
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: 'Build multi-target framework project'
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'Run tests'
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    codeCoverageEnabled: True

- task: DotNetCoreCLI@2
  displayName: 'Pack prerelease NuGet from branch'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), in(variables['Build.Reason'], 'PullRequest'))
  inputs:
    command: pack
    configuration: '$(buildConfiguration)'
    packagesToPack: '**/Seq.App.aspsms.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)\packages'
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)' 

- task: PublishPipelineArtifact@0
  displayName: 'Publish prerelease NuGet to Pipeline Artifact'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), in(variables['Build.Reason'], 'PullRequest'))
  inputs:
    artifactName: 'packages'
    targetPath: '$(Build.ArtifactStagingDirectory)\packages'

- task: DotNetCoreCLI@2
  displayName: 'Pack official NuGet from master'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: pack
    configuration: '$(buildConfiguration)'
    packagesToPack: '**/Seq.App.aspsms.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)\packages'
    versioningScheme: off
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'

- task: NuGetCommand@2
  displayName: 'Push NuGet as official release from master'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)\packages\*.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: '$(nuget.credentials)'
    versioningScheme: off
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'